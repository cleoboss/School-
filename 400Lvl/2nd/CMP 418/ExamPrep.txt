CMP 418 EXAM PREP
Best Practice: Study using a big screen device. Be it a laptop or a tablet. It won't be best to use phones (even though y'all ain't with your phones üòâ)



----------------------------------------------------------------











Lecture 1: Introduction










1a. What is an Algorithm?
ans: A sequence of unambiguous instruction for solving a problem that 
     is, for obtaining a required output for any legitimate input in a 
     finite amount of time
     OR
     It is a sequence of unambiguous instructions that yields required 
     output for every legitimate input in finite time

b. List 5 properties of Algorithms?
ans: - Finiteness
     - Definiteness
     - Input
     - Output
     - Effectiveness

b. Explain each property?
ans: - Finiteness: terminates after a finite number of steps.
     - Definiteness: each step must be rigorously and unambiguously 
       specified, e.g., ‚Äústir until lumpy‚Äù
     - Input: valid inputs must be clearly specified
     - Output: data that result upon completion of the algorithm must be 
       specified
     - Effectiveness: steps must be simple and basic, e.g., check if m is 
       prime

c. Draw the diagram of Algorithm Design and Analysis Process??
ans: Slide 1 (page 5)

d. List all 6 steps of Algorithm design?
ans: - Understanding the Problem
     - Decide on Exact vs. approximate solution
     - Algorithm Design and Data Structure
     - Prove correctness of the algorithm
     - Analyzing an Algorithm
     - Coding Algorithm

e. What is Algorithm Design Techniques?
ans: They are the general approach to solving problems algorithmically that 
     is applicable to a variety of problems from different areas of 
     computing 

e1. List 5 of these techniques?
ans: - Brute force
     - Decrease and Conquer
     - Divide and Conquer
     - Transform and Conquer
     - Space and time tradeoffs
     - Dynamic Programming

f. Algorithms + DataStructures = ______?
ans: Programs

g. List 5 Data Structures?
ans: List, Array, Dictionary, Sets, Queue, Stack

i. List the 2 techniques for proving the correctness?
ans: Exact algorithm
     Approximate algorithm

k. List 4 ways of analyzing an Algorithm?
ans: - Time efficiency
     - Space efficiency
     - Simplicity
     - Generality

k1. Explain all 4 ways?
ans: - Time efficiency: how fast it runs
     - Space efficiency: How much extra memory it uses
     - Simplicity: easier to understand, usually contains fewer bugs, 
       sometimes simpler is more efficient, but not always!
     - Generality: of the problem algorithm solves or the set of inputs it 
       accepts

l. List 5 important types of problems algorithms help us solve?
ans: - Sorting
     - Searching
     - String processing
     - Graph problem
     - Combinatorial Problem 
     - Geometric Problem 
     - Numerical Problem

m. What is Sorting?
ans: It is the rearranging of items in a given list (in a nondecreasing 
     order)

n. List the 2 properties of Sorting Algorithms?
ans: - stable
     - in-place

n1. Explain the 2 properties listed above?
ans: - stable: An sorting algorithm is stable if it preserves the relative 
               order of any 2 equal elements (in its input)
     - in-place: A sorting algorithm is said to be in-place if it does not 
                 require extra memory

n2. List 5 Sorting Algorithms?
ans: - Bubble sort
     - Selection sort
     - Insertion sort
     - Merge sort
     - Quick sort

o. What is a String?
ans: it is a sequence of characters from an alphabet. (it contains letters, 
     number, and special characters)

o1. What is string matching?
ans: it is a particular problem of searching for a given word/pattern in a 
     text

p. What is a Graph?
ans: It is a collection of points called vertices, some of which are 
     connected by line segments called edges

q. List the 3 fundamental data structures?
ans: - Linear Data Structure (Array, Linked list, Stacks and Queues)
     - Graphs (Directed, Undirected, Weighted, Unweighted, Circle)
     - Trees (Binary Tree, Binary Search Tree)

q1. List the 5 Basic Array Operations?
ans: - Traverse
     - Insertion
     - Deletion
     - Search
     - Update

q1. Explain all 5 Basic Array Operations?
ans: - Traverse: print all the array elements one by one.
     - Insertion: Adds an element at the given index.
     - Deletion: Deletes an element at the given index.
     - Search: Searches an element using the given index or by the value.
     - Update: Updates an element at the given index.

r. What is a tree?
ans: A tree is an undirected graph with no Circle
     OR
     A tree is a connected acyclic graph

s. What is a forest?
ans: A forest is a tree with no circle but may be disconnected.
     Additionally:
     - Between every two vertices there is exactly one simple path.
     - Any vertex can be regarded as the root, and then we have a rooted 
       tree.

t. Draw a tree that has a root and label it?
ans: Slide 1 (Page 34)

u. What is an Ordered tree?
ans: It is a rooted tree in which all children of each vertex are ordered

v. What is a Binary Tree?
ans: It is a type of ordered tree where each vertex has at most 2 children and each children is designated as either left child or right child

w. What is  a Binary Search Tree?
ans: It is a Binary Tree where each vertex is assigned a number?
     Additionally:
     - A number assigned to a parental vertex is larger than all numbers in 
       the left subtree and smaller than all numbers in the right subtree

w1. Draw an example of a Binary Search Tree (BST)?
ans: Slide 1 (Page 37)














Lecture 2: Fundamentals of the Analysis of Algorithm Efficiency









2a. What is the Analysis of Algorithm?
ans: It is the theoretical study of computer program performance 
     (processing speed) and resource usage (communication, primary and 
     secondary memory)

b. Analysis of algorithm‚Äôs efficiency can be achieve using 2 resources. 
   Name them?
ans: - Time efficiency and;
     - Space efficiency

b1. Explain both of resources?
ans: - Time efficiency: indicates how fast an algorithm in question runs ~ 
       performance
     - Space efficiency: refers to the amount of memory units required by 
       the algorithm in addition to the space needed for its input and 
       output ~ resource usage

b2. Time efficiency is also called _________, and space efficiency is also 
    called ________?
ans: - Time complexity
     - Space complexity

b3. List 8 other evaluable criteria of algorithm other than Time & Space 
    complexity
ans: - Correctness (Accuracy & precision)
     - Simplicity (Ease)
     - Maintainability (Continuity)
     - Cost of programming time
     - Robustness
     - Stability
     - Features
     - Security
     - Scalability

c. What are the questions one must ask in The Efficiency Analysis Framework?
ans: - How to measure an Input‚Äôs Size
     - How to state Units for Measuring Running Time
     - How to Compute Orders of Growth
     - How to derive Worst, Best and Average Cases Efficiencies

d. What is the Basic Operation(Bop) in algorithms?
ans: it is the operation contributing the most to the total running time 
     (we compute the number of times the basic operation is executed)
     OR
     it is the most time-consuming operation in the algorithm's innermost 
     loop

e. How do you measure Time efficiency?
ans: it is measured by counting the number of times the algorithm‚Äôs basic 
     operation is executed

e1. How do you measure Space efficiency?
ans: it is measured by counting the number of extra memory units consumed 
     by the algorithm

f. The Efficiency analysis framework‚Äôs primary interest lies where?
ans: It lies in the order of growth of the algorithm‚Äôs running time 
     (extra memory units consumed) as its input size goes to infinity.


Page 16: Asymptotic Notations and Basic Efficiency Classes

g. What is Asymptotic Order of Growth?
ans: It is a way of comparing functions that ignores constant factors and 
     small input sizes
     OR
     It is a way of comparing size and functionality of a function

Note: ‚âà means "Approximately equal to (OR simply equal to OR same as)"
h. What is the equivalent of the following below?
   ùë∂ ‚âà ?, ‚Ñ¶ ‚âà ?, Œò ‚âà ?, o ‚âà ?, œâ ‚âà ?
ans: ùë∂ ‚âà ‚â§
     o ‚âà <, 
     ‚Ñ¶ ‚âà ‚â•
     œâ ‚âà >
     Œò ‚âà =, 

     Cheat code: Cram the above rules, they will help you in the future

i. We can define Asymptotic Order of Growth in 2 methods. List them?
ans: - Using Theorem
     - Using definitions of O, ‚Ñ¶, and Œò notations

j. Define the below Asymptotic Notations?
   - Asymptotic O(big oh)-Notation
   - Asymptotic ‚Ñ¶(big Omega)-Notation
   - Asymptotic Œò(big theta)-Notation
ans: - Asymptotic O(big oh)-Notation
       A function t(n) is said to be in O(g(n)), denoted f(n) —î O(g(n)), if 
       f(n) is bounded above by some positive constant multiple of g(n) for 
       sufficiently large n. If we can find +ve constants c and n0 (n not) such that: f(n) ‚â§ c √ó g(n) for all n ‚â• n0.
       
       O(g(n)): is a set of functions that grow no faster than g(n).

     - Asymptotic ‚Ñ¶(big Omega)-Notation
       A function t(n) is said to be in ‚Ñ¶(g(n)), denoted f(n) —î ‚Ñ¶(g(n)), if f(n) is bounded below by some positive constant multiple of g(n) for sufficiently large n. If we can find +ve constants c and n0 such that: f(n) ‚â• c √ó g(n) for all n ‚â• n0 
       
       ‚Ñ¶(g(n)): Set of functions that grow no faster than f(n).
       
     - Asymptotic Œò(big theta)-Notation
       A function f(n) is said to be in Œò(g(n)) denoted f(n) —î Œò(g(n)), if f
       (n) is bounded both above and below by some positive constant 
       multiples of g(n) for all sufficiently large n. If we can find +ve 
       constants c1, c2, and n0 such that. c2 √ó g(n) ‚â§ f(n) ‚â§ c1√ó g(n) ‚àÄn ‚â• 
       n0 (n not)

j1. Draw a diagram for each Asymptotic Notation listed above?
ans: - Asymptotic O(big oh)-Notation
       Slide 2 (page 18)
       
     - Asymptotic ‚Ñ¶(big Omega)-Notation
       Slide 2 (page 20)

     - Asymptotic Œò(big theta)-Notation
       Slide 2 (page 22)

i. List out the 7 properties of Logarithms?
ans:  Slide 2 (page 26)

j. Write out the 4 Sum Manipulation Rules?
ans: Slide 2 (page 29)

k. List the General Plan for Analysis of Nonrecursive Algorithms?
ans: - Decide on parameter n indicating input size
     - Identify algorithm‚Äôs basic operation
     - Determine worst, average, and best cases for input of size n
     - Set up a sum for the number of times the basic operation is executed
     - Simplify the sum using standard formulas and rules to establish its 
       order of growth














Lecture 3: Brute Force and Exhaustive Search
















3a. What is Brute Force Approach (BFA)?
ans: it is the first algorithm design Approach

a1. In short, brute force means __________?
ans: Just do it

b. How does Selection Sort work?
ans: We start selection sort by scanning the entire given list to find its 
     smallest element and Exchange it with the first element

c. Describe Selection Sort?
ans: Slide 3 (page 4)

     Tip: Use video below to see an animation of how it works
     https://visualgo.net/en/sorting

c1. Write the Selection Sort Algorithm?
ans: Slide 3 (page 5)

c2. Using the Selection Sort Algorithm, show the step by step sorting of 
    the below arrays
i.   A = 89   45   68   90   29   34   17
ii.  A = 13   11   33   48   9   81   62   28  
iii. A = 13   11   33   48   9   81
ans: Tip: Slide 3 (page 5)

c3. Calculate to find the complexity class of the Selection sort algorithm?
ans: Tip: Slide 3 (page 5)

d1. Write the Bubble Sort Algorithm?
ans: Slide 3 (page 7)

d2. Using the Bubble Sort Algorithm, show the step by step sorting of 
    the below arrays
i.   A = 89   45   68   90   29   34   17
ii.  A = 13   11   33   48   9   81   62   28  
iii. A = 13   11   33   48   9   81
ans: Tip: Slide 3 (page 7)

d3. Calculate to find the complexity class of the Bubble sort algorithm?
ans: Tip: Slide 3 (page 7)

e. What is the difference between Selection and Bubble sort?
ans: 

f. Write the Sequential Search Algorithm?
ans: Slide 3 (page 14)














Lecture 3: Decrease and Conquer
















4a. What is Decrease and Conquer?
ans: It is based on exploiting the relationship between a solution to a 
     given instance of a problem and a solution to its smaller instance

b. Top-down means _______, and Bottom-up means ________?
ans: Recursive, iterative

c. What are the 3 major types?
ans: - Decrease by a constant
     - Decrease by a constant factor
     - Decrease by Variable size





























