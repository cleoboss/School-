CMP 401 EXAM PREP
Best Practice: Study using a big screen device. Be it a laptop or a tablet. It won't be best to use phones (even though y'all ain't with your phones 😉)



----------------------------------------------------------------



SLIDE I

INTRODUCTION

1a. Computers have been applied in many different areas from controlling power plants to video games in mobile phones. true or false?
ans: true

b. The great diversity in the use of computers have ________________________________
ans: necessitated the development of programming languages with different goals

c. List 4 areas of computer applications?
ans: - Scientific Applications
     - Business Applications
     - Artificial Intelligence
     - Web Software

d. What is Natural Language?
ans: The natural language is a structured system of communication used by humans through speech, signs, gestures and writing

e. Where is the structure of a language?
ans: in its grammar and vocabulary

f. List 7 examples of Natural Language?
ans: - Igbo
     - Igala
     - English
     - Yoruba
     - Hausa
     - French
     - Spanish

g. What is Programming Language?
ans: it is the vocabulary and a set of grammatical rules used to instruct computers

h. List 8 programming languages?
ans: - Java
     - Javascript
     - Typescript
     - Dart
     - Python
     - C/C++
     - COBOL
     - Prolog

i. List the 3 categories of Programming Languages?
ans: - Procedural Programming Languages
     - Functional Programming Languages
     - Object-oriented Programming Languages

>>>>>>>>>>>>>>>>>>>>>>>>>>>
Procedural Programming Languages
i1. How do Procedural programming languages work?
ans: They execute statements (lines of code) in a sequence (from top to bottom)

i2. Procedural languages focuses ________________________________________?
ans: on using multiple variables and heavy loops to execute their problems

i3. In procedural languages, functions may control variables other than return values. For example, printing to the terminal. true or false?
ans: true

i4. List 5 Examples of procedural languages?
ans: - Basic
     - C/C++
     - Java
     - FORTRAN
     - Pascal

Functional Programming Languages
i5. How do Functional programming languages work?
ans: These languages use stored data and frequently avoid loops in favour of recursive functions to execute their problems

i6. Function languages focuses ________________________________________?
ans: primarily on the return values of functions.

i7. Functional languages are easier and allow programmers to easily focus on abstract issues. true or false?
ans: true

i8. List 3 Examples of functional languages?
ans: - Python
     - Lisp
     - Erlang

Object-oriented Programming Language
i9. How do Object-oriented programming (OOP) languages work?
ans: OOP languages view the world as a group of objects that have internal data and parts of the data that can be accessed externally

i10. OOP languages focuses ________________________________________?
ans: thinking about a collection of objects and services that can be offered in specific problems

i11. The major principle here is encapsulation which puts everything an object would need into the object. true or false?
ans: true

i13. OOP languages thrive on ______________ and _____________?
ans: reusability and inheritance

i14. List 5 examples of OOP languages?
ans: - Java
     - Python
     - C++
     - Lisp
     - Perl

<<<<<<<<<<<<<<<<<<<<<<<<<<<

j. List 6 reasons why we should study programming languages?
ans: - To improve our ability to develop effective Algorithms
     - To improve our use of your existing Programming Languages
     - To increase our vocabulary of useful programming constructs
     - To allow a better choice of programming language
     - To make it easier to learn a new language
     - To make it easier to design a new language

k. Who defines and standardises a language?
ans: Languages can be defined/designed by any individual/group

l. Who define language standards?
ans: National standard bodies

m. List the 3 national standard bodies that define languages?
ans: - ISO
     - IEEE
     - ANSI
     
n. What do the acronyms stand for (ISO, IEEE, ANSI)? 
ans: ISO - International Standards organization
     IEEE - Institute of Electrical and Electronics Engineers
     ANSI - American National Standards Institute

o. List the ways these National standard bodies define language standards?
ans: - Working group of volunteers set up to define standard
     - Agree on features for new standard
     - Vote on standard
     - If approved by working group, submitted to parent organization for approval.

p. Why are standards important?
ans: - Standards ensure language conformity with rules and laws.
     - Standards define behavior/constructs of language - one that meets the rules of the language standard.

q. In general (except for Ada), behavior of non-conforming program is not specified, so any extensions to a standards conforming compiler may still be standards conforming, even though the program is not standards conforming. true or false?
ans: true

r. How often are standards reviewed?
ans: once every 5 YEARS

s. When should one standardize a language?
ans: A. If too late - many incompatible versions (FORTRAN in 1960s was already a de facto standard, but no two were the same)
     B. If too early - no experience with language (Ada in 1983 had no running compilers)
     C. Just right – Java, 1995 (28 years ago) stable version is now Java SE 17 as of September, 2021



LANGUAGE DEFINITION
2a. How are languages defined?
ans: Languages are defined on the basis of characters and symbols which are strung up to form words or signs.

b. The input/output of any algorithm must be presented as a finite string of symbols. true or false?
ans: true

c. The arbitrary set Σ is called ____________.
ans: alphabet

d. The elements of Σ are called ________________
ans: symbols (or characters)

e. What is a string (or word) over Σ?
ans: it is a finite sequence of zeros or more symbols from Σ

f. Formally, a string w over Σ is defined (recursively) as either?
ans: - The empty string, denoted by ԑ(epsilon), or
     - An ordered pair (a,x), where a is a symbol in Σ and x is a string over Σ

g. Normally, either a·x or simply ax is used to denote _____
ans: (a,x)

h. Explicit strings are simply written as a sequence of symbols instead of __________
ans: nested ordered pair

h1. For example, STRING is a convenient shorthand for the formal expression _______________
ans: (S,(T,(R,(I,(N,(G,ԑ))))))

i. The set of strings over Σ is denoted by ___________
ans: Σ* (sigma star)

j. All the elements in Σ* is a set of finite string, although Σ* is an infinite set containing strings of every possible finite length. true or false?
ans: true

k. The length |w| of a string is formally defined as
ans:           0    if w = ԑ
      |w| := {
               1    if w = ax

l. The string SEVEN has length = __.
ans: 5

m. The Concatenation of two strings x and y, denoted either x·y or simply xy, is the unique string containing the characters of x in order followed by the characters in y in order. true or false?
ans: true

m1. For example, the string NOWHERE is the concatenation of the strings NO and WHERE. That is NO·WHERE = __________
ans: NOWHERE

m2. Concatenation is formally defined as?
ans:           z          if w = ԑ
      |w| := {
               a·(x·z)    if w = ax 

m3. When describing concatenation of more that two strings, dots andparentheses are normally omitted. This is done by simply writing wxyz instead of (w·(x·y)·z). true or false?
ans: true

n. What is a Formal Language?
ans: a formal language is a set of finite alphabet Σ, or equivalently, an arbitrary subset of Σ*

n1. Are each of the following sets a language:
- The empty set Ø.
- The set {ԑ}.
- The set {0,1}.
- The set {THE, OXFORD, ENGLISH, DICTIONARY}
ans: yes they are

n2. Formal languages are not languages in the same sense that English, Python and Klingon are languages. true or false?
ans: true

n3. Strings in a formal language do not necessarily carry any meaning nor are they assembled into larger units. true or false?
ans: true

o. List some Language Evaluation Criteria
ans: - When it comes to computing, except they are standardized, not many concepts are agreed upon. 
     - For programmers, it is important they understand the underlying concepts of the various constructs and capabilities of the language
     - Some of the commonly used criteria for evaluating a programming language are:
       - Readability
       - Writability
       - Reliability and
       - Cost
     - Though it may be seen as rather controversial, a list of evaluation criteria is presented in the following table.
       - Readability
         - The ease with which a program can be read and understood is one of the most important criteria for judging programming languages.
         - There was a time when programming was largely thought of in terms of writing codes.
         - At this stage, the primary positive characteristic of programming languages was efficiency.
         - Language construct were designed more from the point of view of the machines instead of the users.
         - Things changed when it SDLC integrated maintenance in the cycle.
         - Readability became an important criteria for measuring the quality of programming languages because maintenance depends largely on readability.


       - Writability
         - Writability is a measure of how easily a language can be used to create programs for a chosen problem domain.
         - Like readability, writability is also considered in the context of the target problem domain of the language.
         - Writability eases the ability to chose languages in solving problems in particular domains.
         - For example, the writability of Visual BASIC (VB) and C are dramatically different for creating a program that has a graphical user interface (GUI) for which VB is particularly designed for.


       - Reliability
         - A program is said to be reliable if it performs to its specification under all conditions.
         - Reliability is measured based on characteristics such as:
           - Type checking
           - Exception handling
           - Aliasing
           - Readability and writability.

       - Cost
         The total cost of a programming language is a function of many of its characteristics:
         1. Cost of training programmers to use the language
           - This is a function of the simplicity and orthogonality and experience of the programmer.
           - Although more powerful not necessarily more difficult to learn, they often are.
         2. Cost of writing programs in the language
           - This is a function of the writability of language which depends in part on its closeness in purpose to the particular application.
           - The original efforts to design and implement high level languages were driven by the desire to lower the costs of creating software.
         3. Cost of compiling
           - For example, the major impediment to early use of Ada was the prohibitively high cost of running the first generation of Ada compilers.
         4. Language design
           - The cost of executing programs written in a language isi greatly influenced by the design.
           - Some language that requires many run-time type checks will prohibit fast code execution, regardless of the quality of the compiler.
           - A simple trade off can be made between compilation cost and execution speed of the compiled code using optimization.
           - Optimization is a collection of techniques that compilers use decrease the size and/or increase the execution speed of the code they produce.

p. Apart from the language evaluation criteria, there are other factors that influence the basic design of programming languages. The most important of these factors are _____________ and ___________?
ans: - computer architecture and
     - programming design methodologies.

p1. The basic architecture of computers has had a profound effect on language design. true or false?
ans: true

p2. Most of the popular languages of the past 60 years have been designed around the prevalent computer architecture, called the _________________?
ans: von Neumann architecture

p3. _______________ is one of the originators of this architecture therefore it is named after him.
ans: John von Neumann

p4. In a von Neumann computer, both the data and programs are stored in ________________
ans: the same memory

p5. In a von Neumann computer, the central processing unit (CPU) which executes the instruction is separate from ___________?
ans: the memory

p6. In a von Neumann computer, instructions and data must be transmitted, or piped from ________ to __________?
ans: memory to the CPU

p7. In a von Neumann computer, results of operations in the CPU are moved back to ___________?
ans: the memory

p8. Nearly all the digital computers built since the 1940s are based on von Neumann architecture. true or false?
ans: true

p9. Draw a diagram of the Von Neumann architecture
ans: Slide I (page 30)

p10. The execution of a machine code program on a von Neumann architecture occurs in a process called the __________________
ans: fetch-execute cycle

p11. The program resides in the memory but are executed by the CPU.
ans: true

p12. Each instruction to be executed must be moved from memory to the processor
ans: true

p13. The address of the next instruction to be executed is maintained in a _____________________?
ans: register (called the program counter)

p14. The fetch-execute cycle is as follows:
ans: - initialize the program counter
     - repeatforever
     - fetch the instruction pointed to by the program counter
     - increment the program counter to point at the next instruction
     - decode the instruction
     - execute the instruction
     - endrepeat

p15. From the von Neumann Architecture, two of the primary components of a digital computer are the ____________ and ______________?
ans: - Processor and; 
     - Internal memory

p16. The internal memory stores ___________ and ____________?
ans: program and data

p17. What is the Processor?
ans: The processor is a collection of circuits that provides a realization of a set of primitive operations or machine instructions (such as arithmetic and logic operations)

p18. Some of these machine instructions are sometimes called _____________?
ans: microinstructions (they are defined at lower levels)

p19. Language implementation methods provide the facilities through which high level programming languages get to speak the language of the machine. true or false?
ans: true

p20. Implementation methods require a large collection of programs (operating system) which supplies higher-level primitives than those of the machine language. true or false?
ans: true

p21. These primitives provide?
ans: - System resource management
     - Input and output operations
     - File management system
     - Text and/or program editors
     - And a host of other functionalities.

p22. Because language implementation systems need many of the operating system facilities, they interface with the __ rather than directly with the _____________?
ans: OS, processor

p23. The OS and language implementations are layered over the machine language interface of the computer. These layers can be thought of as virtual computers, providing interface to the user at higher levels
ans: true

p24. Most computer systems provide several different virtual computer. true or false?
ans: true

p25. The user programs form another layer over the top of the layer of virtual computers. true or false?
ans: true











2a. List the 3 fundamental methods for implementing programming languages?
ans: - Compilation
     - Pure Interpretation
     - Hybrid Implementation

A. COMPILATION
b. How does the compilation method work?
ans: This method uses compilers to translate programs into machine languages which are
directly executed on the computer

c. Languages that use the compilation method have the advantage of being very fast, once the translation process is complete. true or false
ans: true

d. List 2 Example of languages that are implemented using the Compilation method?
ans: C
     C++
     COBOL

e. Draw the Compilation diagram?
ans: SLIDE 1 (page 40)

f. ___________ is the language the compiler translates?
ans: Source code

g. What does the Lexical Analyzer do?
ans: gathers the characters of the source program into lexical units

h. What are the Lexical units?
ans: The lexical units of a program are identifiers, special words, operators, and punctuation symbols

i. The lexical analyzer ignores comments in the source program because __________________?
ans: The compiler has no use for them

j. What does the Syntax Analyzer do?
ans: The syntax analyzer takes the lexical units from the lexical analyzer and uses them to construct hierarchical structures called parse trees

k. These parse trees represent ________________________________
ans: The syntactic structure of the program

l. In many cases, no actual parse tree structure is constructed; rather ________________________________________
ans: The information that would be required to build a tree is generated and used directly

m. What does the Intermediate Code Generator do?
ans: The intermediate code generator produces a program in a different language, at an intermediate level between the source program and the final output of the compiler (the machine language program)

n. Intermediate languages sometimes look very much like assembly languages, and in fact, sometimes are actual assembly languages. true or false?
ans: true

o. In other cases, the intermediate code is at a level somewhat higher than ____________________
ans: An assembly language

p. The semantic analyzer is an integral part of the intermediate code generator. The semantic analyzer checks for errors, such as type errors, that are difficult, if not impossible, to detect during syntax analysis.
ans: true

q. Optimization improves programs (usually in their intermediate code
version) by making them smaller or faster or both

r. Optimization improves programs (usually in their intermediate code version) by ______________________
ans: Making the program smaller or faster or both

s. Because many kinds of optimization are difficult to do on machine language, most optimization is done on the ____________________
ans: intermediate code

t. The _________________ translates the optimized intermediate code version of the program into an equivalent machine language program.
ans: Code generator

u. The symbol table serves as a __________ for the compilation process.
ans: Database

v. The primary contents of the symbol table are the ______________________________________. 
ans: Type and Attribute information of each user-defined name in the program

w. This information is placed in the symbol table by the lexical and syntax analyzers and is used by the __________________ and __________________?
ans: semantic analyzer and the code generator




B. Pure Interpretation
3a. How does Pure Interpretation method work?
ans: In pure interpretation method, programs are interpreted by another program called an interpreter, with no translation whatever

b. The interpreter program acts as a software simulation of a machine whose fetch-execute cycle deals with high-level language program statements rather than machine instructions
ans: true

c. This software simulation obviously provides a _____________ for the language.
ans: virtual machine

d. Pure interpretation has the advantage of allowing easy implementation of many source-level debugging operations, because all run-time error messages can refer to source-level units. true or false?
ans: true

d1. For example, if an array index is found to be out of range, the error message can easily indicate the source line of the error and the name of the array. true or false?
ans: true

e. What is the disadvantage with Pure Interpretation?
ans: It is that execution is 10 to 100 times slower than in compiled systems.

f. The primary source of interpreters slowness is the decoding of the high- level language statements, which are far more complex than machine language instructions (although there may be fewer statements than instructions in equivalent machine code).
ans: true

g. regardless of how many times a statement is executed, it must be _______________?
ans: Decoded every single time

h. What are some bottlenecks with pure interpreter?
ans: - statement decoding
     - requires more space

i. The source program and the symbol table must be present during interpretation?
ans: true

j. The source program may be stored in a form designed for easy access and modification rather than one that provides for minimal size. true or false?
ans: true

k. Draw a diagram of Pure Interpretation process
ans: SLIDE 1 (page 51)








C. Hybrid Implementation
4a. How does Hybrid Implementation method work?
ans: high-level language programs are translated to an intermediate language
designed to allow easy interpretation

b. This method is faster than pure interpretation because the source language statements are _____________?
ans: decoded only once

c. Draw a diagram of the Hybrid Implementation process?
ans: SLIDE 1 (page 53)

d. In Hybrid Implementation, instead of translating intermediate language code to machine code, it simply interprets the intermediate code. true or false?
ans: true

e. The initial implementations of Java were all hybrid implementation. true or false?
ans: true

f. Java's intermediate form, called byte code, provides portability to any machine that has a byte code interpreter and an associated run-time system. true or false?
ans: true

g. There are now systems that translate Java byte code into machine code for faster execution. true or false?
ans: true (e.g JIT system (Just-in-Time))

h. A Just-in-Time (JIT) implementation system initially translates programs to an ______________________
ans: intermediate language

i. JIT during execution compiles intermediate language methods into _____________ when they are called
ans: machine code

i1. The machine code version is kept for subsequent calls. true or false?
ans: true

j. The machine code version is kept for subsequent calls. true or false?
ans: true 

k. JIT systems now are widely used for Java programs. true or false?
ans: true

l. The .NET languages are all implemented with a JIT system. true or false?
ans: true

m. Sometimes an implementer may provide both compiled and interpreted implementations for a language.
ans: true

m1. In these cases, the interpreter is used to develop and debug programs. Then, after a (relatively) bug-free state is reached, the programs are compiled to increase their execution speed. true or false?
ans: true











Syntax and semantics
5a. The task of providing a concise yet understandable description of a programming language is difficult but essential to the success of the language. true or false?
ans: true

b. One of the problems in describing a language is the _____________________________?
ans: diversity of the people who must understand it (initial evaluators, implementers, and users).

c. Programming language implementers obviously must be able to determine how the expressions, statements, and program units of a language are formed, and also their intended effect when executed. true or false?
ans: true

d. The difficulty of the implementers’ job is in part determined by the _______________________________.
ans: completeness and precision of the language description

e. The study of programming languages, like the study of natural languages, can be divided into examinations of ____________ and _____________?
ans: syntax, Semantics

f. What does the syntax of a programming language mean?
ans: it is the form of its expressions, statements, and program units

g. What does Semantics mean?
ans: it is the meaning of behind a programming languages expressions, statements, and program units.

h. What does the syntax of a java "while" stattement look like?
ans: while(boolean_expression) statement

h1. The semantics of the statement form above is that
   i. when the current value of the Boolean expression is true, the embedded
      statement is executed.
  ii. Then control implicitly returns to the Boolean expression to repeat the
      process.
 iii. If the Boolean expression is false, control transfers to the statement
      following the while construct.

      true or false?
ans: true

i. In a well-Designed programming language, semantics should follow directly from _____________
ans: syntax

j. Describing syntax is easier than describing semantics, partly because?
ans: - A concise and universally accepted notation is available for syntax description 
     - But none has yet been developed for semantics






















----------------------------------------------------------------








































SLIDE II
Problem of Describing Syntax

1. What is a language?
Ans: A language is a set of strings of characters from some alphabets.

b. How are sentences or statements formed?
Ans: By combining strings of a language

c. What does the syntax rules of a language specify?
Ans: They specify which characters from the language's alphabet are in the language

d. The formal description of the syntax of programming languages often do not include ____________________
Ans: descriptions of the lowest-level syntactic units

e. These lowest-level syntactic units are called ___________?
Ans: Lexemes

f. The lexemes of a programming language include its ____________, ____________, and ____________ among others
Ans: numeric literals, operators, and special words

g. The description of lexemes can be given by ____________________
Ans: A lexical specification (usually separate from the syntactic description of the language)

h. It is best to think of programs as _________, rather than of ______________?
Ans: Strings of lexemes, characters

i. Lexemes are partitioned into groups such as:
Ans: variable names
     Methods (functions)
     Etc

j. These groups are called ___________?
Ans: identifiers

k. Each group is represented by a ________ or ___________?
Ans: name, token

l. A token of a language is a category of its ___________?
Ans: lexemes

m. An identifier is a token that can have ________________?
Ans: lexemes or instances (such as sum or total)

n. In some cases, a token has only a single possible lexeme. true or false?
Ans: true

o Consider the below simple statement (code)

index = 2*count+17;

The above statement can be described into the following form

Lexemes      token
index        identifier
=            equal_sign
2            int_literal
*            mult_op
count        identifier
+            plus_op
17           int_literal
;            semicolon

With the above example, describe the form of the below statement

username = name+age*3

Ans: ?


--------------------------------------

2. Languages are formally defined in two distinct ways. Name them?
Ans: Language Recognition
     Language Generation

b. What is a Language Recogniser?
Ans: A recogniser is a device that reads the input strings of a language and decides whether the input strings belong to the language

c. The recogniser only determines whether given programs are in the language. true or false?
Ans: true

d. The syntax analyzer part of a compiler is a recognition device. true or false?
Ans: true

e. The syntax analyser is also known as ___________?
Ans: A Parser

f. What is a Language Generator?
Ans: It is a device that generates sentences of a language

g. How can one determine if the syntax of a particular sentence is correct?
Ans: One can determine if the syntax of a particular sentence is correct by comparing it to the structure of the generator

h. The formal language generation mechanisms are usually called ___________
Ans: Grammars

i. _________ are commonly used to describe the syntax of programming languages
Ans: Grammars

j. What are the most widely used method for syntax description?
Ans: - Backus-Naur Form
     - Context Free Grammar

k. When was Backus-Naur Form (BNF) invented?
Ans: 1959

l. Who invented Backus-Naur Form (BNF)?
Ans: John Backus

m. Why was Backus-Naur Form (BNF) invented?
Ans: To describe ALGOL 58 syntax

n. What is MetaLanguage?
Ans: A metalanguage is a language used to describe another language

o. Is BNF a metalanguage for programming languages?
Ans: Yes

p. In BNF, __________ are used to represent classes of syntactic structures?.
Ans: Abstractions

q. BNF actS like syntactic variables also called _____________.
Ans: Non-terminal symbols

r. A simple "assignment statement" can be represented by the abstraction 
Ans: <assign>

s. The definition of <assign> is given as: 
<assign>→<variable> = <expression>         (part 1) 
which could represent the below statement:
index = 5 + count                          (part 2)

In conclusion (part 1) describes the structure of the coding statement in (part 2). true or false?
Ans: true

t. A rule has a left hand side (LHS) and the right hand side (RHS). true or false?
Ans: true

u. LHS is the abstraction being defined. true or false?
Ans: true

v. RHS consists of ___________, __________, and _____________
Ans: mixtures of tokens, 
     lexemes and 
     references to other abstractions

w. The abstractions in a BNF description, or grammar, are often called _____________
Ans: Nonterminal symbols (or simply nonterminals)

x. The _________ and ____________ of the rules are called terminal symbols (or simply terminals)
Ans: lexemes, tokens

y. Note that the BNF description, or grammar is simply a collection of rules. true or false?
Ans: true

z. Nonterminal symbols can have two or more distinct definitions, representing two or more possible syntactic forms in the language. True or false?
Ans: true

a1. Multiple definitions can be written as a single rule, with the different definitions separated by the symbol ______________?
Ans: | (meaning logical OR)

a2. A simple if statement can be described with the rules:

<if_stmt> → if ( <logic_expr> ) <stmt>
<if_stmt> → if ( <logic_expr> ) <stmt> else <stmt>


OR

<if_stmt> → if ( <logic_expr> ) <stmt> | if ( <logic_expr> ) <stmt> else <stmt>

Whichever one you go with works. Is this true or false?
Ans: This is true

a3. In the above example <stmt> represents either a single statement or a compound statement. true or false?
Ans: true

a4. Although BNF is simple, it is sufficiently powerful to describe nearly all of the syntax of programming languages. true or false?
Ans: true

a5. BNF can describe lists of similar constructs, the order in which different constructs must appear, and nested structures to any depth, and even simply operator precedence and operator associativity. true or false?
Ans: true

a6. Variable-length lists in mathematics are often written using ________________?
Ans: An ellipsis (. . .) (something like: 1,2, ...)

a7. Does BNF include ellipsis?
Ans: No it doesn't

a8. Since BNF does not include ellipsis, an alternative method for describing lists of syntactic elements in programming languages (for example, a list of identifiers appearing ona data declaration statement) would be using?
Ans: recursion

a9. How is a rule recursive?
Ans: A rule is recursive if its LHS appears in its RHS

SPIN-OFF: The following rules illustrate how recursion is used to describe lists

<ident_list> → identifier | identifier, <ident_list>

a10. Recursion is used to describe lists. true or false?
Ans: true

b1. A grammar is a generative device for defining ________?
Ans: Languages

b2. The sentences of a language are generated through a sequence of applications of the rules, beginning with a special nonterminal of the grammar called the ___________.
Ans: Start symbol

b3. The above sequence of rule applications is called __________
Ans: A derivation

b4. In a grammar for a complete programming language, the start symbol represents a complete program and is often named ___________
Ans: <program>

b5. Listing 1: A grammar for a small language

<program> → begin <stmt_list> end
<stmt_list> → <stmt> | <stmt> ; <stmt_list>
<stmt> → <var> = <expression>
<var> → A | B | C
<expression> → <var> + <var> | <var> – <var> | <var>

The language described by the grammar of Listing 1 has only one statement form: assignment. true or false?
Ans: true

b6. A program consists of the special word _____, followed by ___________ separated by semicolons, followed by the special word ___?
Ans: begin, a list of statements, end

b7. What is an Expression?
Ans: An expression is either a single variable or two variables separated by either a + or - operator

b8. What are the only variable names in our Listing 1 program?
Ans: A, B and c

b9. Listing 2:
<program> => begin <stmt_list> end
     => begin <stmt> ; <stmt_list> end
          => begin <var> = <expression> ; <stmt_list> end
          => begin A = <expression> ; <stmt_list> end
          => begin A = <var> + <var> ; <stmt_list> end
     => begin A = B + <var> ; <stmt_list> end
     => begin A = B + C ; <stmt_list> end
          => begin A = B + ; <stmt> end
          => begin A = B + C ; <var> = <expression> end
     => begin A = B + C ; B = <expression> end
          => begin A = B + C ; B = <var> end
          => begin A = B + C ; B = C end

Go over the above derivation

In Listing 2:
b10. The above derivation, like all derivations, begins with the start symbol, in our case _________
Ans: <program>

c1. The symbol => means “________”
Ans: derives

c2. Each successive string in the sequence is derived from the previous string by replacing one of the nonterminals with one of that nonterminal’s definitions. true or false?
Ans: true

c3. Each of the strings in the derivation, including <program>, is called a sentential form.
Ans: true

c4. The replaced nonterminal is always the leftmost nonterminal in the previous sentential form.
Ans: true

c5. Derivations that use this order of replacement are called __________________.
Ans: leftmost derivations

c6. The derivation continues until the sentential form contains _____________
Ans: No nonterminals

c7. The sentential form, consisting of only terminals, or lexemes, is the ____________
Ans: generated sentence

c8 Consider the statement

A = B * (A + C)

Listing 3:
<assign> => <id> = <expr>
     => A = <expr>
     => A = <id> * <expr>
     => A = B * <expr>
     => A = B * ( <expr>)
     => A = B * ( <id> + <expr>)
     => A = B * ( A + <expr>)
     => A = B * ( A + <id>)
     => A = B * ( A + C )


--------------------------------------


Parse Tree

3. Grammars naturally describe the hierarchical syntactic structure of the sentences of the
languages they define. true or false?
Ans: true

b. These hierarchical structures are called ___________
Ans: parse trees

c. Draw a parse tree listing 3
Ans: 
   <assign>
   /  |  \
  /   |   \
<id>  =    <expr>
 |        /  |   \
 |       /   |    \
 A     <id>  +    <expr>
        |        /   |   \
        |       /    |    \
        |      /     |     \
        B     (    <expr>   )
                  /  |   \
                 /   |    \
               <id>  +    <expr>
                |           |
                |           |
                A          <id>
                            |
                            |
                            C

d. What is ambiguity?
Ans: It is when a grammar has 2 or more distinct parse trees

d. When is a grammar ambiguous?
Ans: A grammar is ambiguous if and only if it generates a sentential form that has two or more distinct parse trees

Consider Listing 1:
<assign> → <id> = <expr>
     <id> → A | B | C
     <expr> → <expr> + <expr> | <expr> * <expr> | ( <expr>) | <id>

e. Using the sentence

A = B + C * A

is the grammar in Listing 1 ambiguous?
Ans: Yes it is, because we can have 2 parse trees

PARSE TREE 1

   <assign>
   /  |  \
  /   |   \
<id>  =    <expr>
 |        /  |   \
 |       /   |    \
 A   <expr>  +     <expr>
        |        /   |   \
        |       /    |    \
        |      /     |     \
       <id>  <expr>  *    <expr>
        |       |           |
        |       |           |
        B      <id>        <id>
                |           |
                |           |
                C           A

PARSE TREE 2

   <assign>
   /  |  \
  /   |   \
<id>  =    <expr>
 |        /  |    \
 |       /   |     \
 A    <expr> *     
     /  |   \
    /   |    \
   /    |     \
<expr>  *    <expr>
  |           |
  |           |
 <id>        <id>
  |           |
  |           |
  B           C


f. Characteristically, a grammar is also ambiguous if?
ans: - If the grammar generates a sentence with more than one leftmost derivation and
     - If the grammar generates a sentence with more than one rightmost derivation

g. Syntactic ambiguity of language structures is a problem because?
ans: - compilers often base the semantics of those structures on their syntactic form

h. The compiler chooses the code to be generated for a statement by examining its parse tree.
   true or false?
ans: true

i. If a language structure has more than one parse tree, then the meaning of the structure cannot be determined uniquely. true or false?
ans: true

j. There are some characteristics of programming languages that are difficult to describe with BNF, and _______________________?
ans: some that are impossible

k. In Java a floating-point value cannot be assigned to an integer type variable, although the opposite is legal. true or false?
ans: true

l. (Question k) this restriction can be specified in BNF, it requires additional nonterminal symbols and rules?
ans: true

m. If all of the typing rules of Java were specified in BNF, the grammar would _______________, because _____________________?
ans: become too large to be useful,
     the size of the grammar determines the size of the syntax analyze
     
n. As an example of a syntax rule that cannot be specified in BNF, consider the common rule that all variables must be declared before they are referenced. true or false?
ans: true

o. It has been proven that (Question n) rule cannot be specified in BNF. true or false
ans: true

p. What is static semantics?
ans: The static semantics of a language supposes that the semantic is not only indirectly related to the meaning of programs during execution; rather, it has to do with the legal forms of programs (syntax rather than semantics).

q. Many static semantic rules of a language state its ____________?
ans: type constraints

r. Static semantics is so named because the analysis required to check these specifications can be done at compile time. true or false?
ans: true

s. Because of the problems of describing static semantics with BNF, a variety of more powerful mechanisms has been devised for that task. true or false?
ans: true

t. What are Attribute Grammars?
ans: Attribute grammars are a formal approach both to describing and checking the correctness of the static semantics rules of a program.

u. Although Attribute Grammars are not always used in a formal way in compiler
design, the basic concepts of attribute grammars are at least ____________________?
ans: informally used in every compiler

v. An attribute grammar is a device used to describe more of the structure of a programming language than can be described with a context-free grammar. true or false?
ans: true

w. An attribute grammar is an extension to a _______________?
ans: context-free grammar

w1. The extension allows certain language rules to be conveniently described, such as ____________?
ans: type compatibility

x. Attribute grammars can also be defined as? 
ans: context-free grammars to which have been added attributes, attribute computation functions, and predicate functions.

x1. Attributes, which are associated with grammar symbols (the terminal and nonterminal symbols), are similar to variables in the sense that they can have values assigned to them. true or false?
ans: true

x2. Attribute computation functions are sometimes called 
ans: semantic functions

x3. Attribute computation (semantic functions) are associated with grammar rules. They are used to _________________?
ans: specify how attribute values are computed

x4. Predicate functions, which state the static semantic rules of the language, are ____________________?
ans: associated with grammar rules

y. Intrinsic attributes are synthesized attributes of leaf nodes whose values are determined _______________?
ans: outside the parse tree

y1. For example, the type of an instance of a variable in a program could come from the ___________, which is used to _______________________?
ans: symbol table
     store variable names and their types

y2. The contents of the symbol table are set based on earlier ____________________?
ans: declaration statements

y3. Assuming that an unattributed parse tree has been constructed and that attribute values are needed, the only attributes with values are going to be the __________________?
ans: intrinsic attributes of the leaf nodes

y4. Given the intrinsic attribute values on a parse tree, the semantic functions can be used to ____________________?
ans: compute the remaining attribute values






























































