Question
1. Compare and contrast between plan-driven /agile methods
2. Write the requirements for the four software projects

Answers
1. 
  Approach to Change:
  - Plan-driven: Emphasize detailed planning and documentation upfront, with a focus on sticking to the initial plan as much as possible. Changes are generally discouraged or require formal approval and documentation.
  - Agile: Embrace change and adaptability. Agile projects expect changes throughout the development process and are designed to accommodate them through iterative cycles of development, feedback, and adaptation

  Flexibility:
  - Plan-driven: Typically less flexible as they rely heavily on upfront planning and detailed documentation. Changes can be cumbersome and may require significant rework.
  - Agile: Highly flexible and responsive to change. Agile teams prioritize delivering working software frequently and iteratively, allowing for adjustments based on feedback from stakeholders.

  Project Control:
  - Plan-driven: Emphasize strict control measures to ensure adherence to the plan, often involving extensive documentation, progress tracking, and formal change management processes.
  - Agile: Promote self-organizing teams with less emphasis on formal control mechanisms. Instead, agile relies on close collaboration, transparency, and continuous improvement to achieve project goals.

  Delivery Approach:
  - Plan-driven: Typically follow a sequential or phased approach to development, such as the Waterfall model, where each phase is completed before moving on to the next.
  - Agile: Employ iterative and incremental development, delivering small increments of working software in short time frames (iterations or sprints). Agile methodologies like Scrum and Kanban focus on delivering value early and often.

  Customer involvement:
  - Plan-driven: Customer involvement often occurs primarily at the beginning and end of the project, with limited opportunities for feedback and collaboration during development.
  - Agile: Encourage close collaboration with customers and stakeholders throughout the project. Customers are involved in prioritizing features, providing feedback on iterations, and shaping the direction of the product.

  Risk Management:
  - Plan-driven: Tend to focus on identifying and mitigating risks upfront through extensive planning and risk analysis.
  - Agile: Address risks iteratively by continuously assessing and adapting to changing circumstances. Agile teams prioritize delivering high-value features early, which helps to mitigate risks associated with uncertainty.




2. 
NOTE: Feel free to only list 4 to 6 of any of the requirements

A. Employee Management system(EMS) Requirements
- User Roles and Permissions:
  - Define two user roles: Admin and Employee.
  - Admin should have access to company information, leave management, and employee details management.
  - Employees should have limited access to their own information and functionalities like leave status, qualifications, promotion history, holiday list, grievance submission, and resignation.

- User Authentication and Authorization:
  - Implement secure login mechanisms for both Admin and Employee.
  - Admin should be able to create, edit, and deactivate employee accounts.

- Company Information Management:
  - Allow Admin to manage and update company information, including company policies, organizational structure, and contact details.

- Leave Management:
  - Admin should be able to manage employee leave requests, including approval, rejection, and tracking.
  - Employees should be able to submit leave requests and view their leave balances and statuses.

- Employee Details Management:
  - Admin should be able to add, edit, and delete employee details, including personal information, contact details, qualifications, and promotion history.
  - Employees should have read-only access to their own details and the ability to update certain fields like contact information.

- Holiday List Management:
  - Admin should be able to maintain a yearly holiday list, including public holidays and company-specific holidays.
  - Employees should be able to view the holiday list.

- Grievance Submission:
  - Employees should have the ability to submit grievances or complaints through the system.
  - Admin should have access to manage and respond to grievances.

- Resignation Submission:
  - Employees should be able to submit their resignation through the system.
  - Admin should have access to manage resignation requests.

- Security and Data Privacy:
  - Ensure data privacy and security measures are implemented to protect sensitive employee information.
  - Implement role-based access control to restrict unauthorized access to data and functionalities

- User Interface:
  - Develop a user-friendly interface for both Admin and Employee functionalities.
  - Ensure accessibility and responsiveness across different devices and screen sizes.

Documentation and Training:
  - Provide comprehensive documentation for system usage, including user guides for Admin and Employees.
  - Offer training sessions for users to familiarize themselves with the system.

Scalability and Performance:
  - Design the system to handle a large volume of employee data and concurrent user interactions efficiently.
  - Optimize performance to ensure fast response times and minimal downtime.




B. Payroll Management System

- User Authentication and Authorization:
  - Implement secure login mechanisms for employees using their employee ID and password.
  - Admin should have unique credentials to access the system.

- User Image Capture and GPS Tracking:
  - Develop functionality to capture the user's image upon login and logout from the Android device.
  - Utilize GPS tracking to automatically update the user's location every five minutes while logged into the system.
  - Send the captured user image and GPS location to the Admin in real-time.

- Employee Profile Management:
  - Allow Admin to create and manage employee profiles, including personal information (name, job position, qualifications, etc.).
  - Provide functionality for Admin to update employee profiles as needed.

- Attendance Tracking:
  - Automatically record employee attendance based on login and logout events captured by the system.
  - Ensure that no proxy attendance can be added due to the GPS-enabled nature of the application.

- Payroll Management:
  - Allow Admin to access salary details and breakdowns for each employee.
  - Enable Admin to view salary details by entering the employee ID and date.

- Real-time Communication:
  - Implement real-time communication between the Android devices used by employees and the Admin system.
  - Ensure timely transmission of user images, GPS locations, and other relevant data.

- Data Security and Privacy:
  - Implement robust security measures to protect employee data, including encryption of sensitive information during transmission and storage.
  - Ensure compliance with data privacy regulations to safeguard employee confidentiality.

- Reporting and Analytics:
  - Provide reporting capabilities for Admin to track employee attendance patterns, working hours, and other relevant metrics.
  - Offer analytics features to help Admin make informed decisions regarding payroll adjustments and resource allocation.

- User Interface:
  - Develop a user-friendly interface for both employees accessing the app from their Android devices and Admin accessing the system.
  - Ensure accessibility and ease of navigation for all users.

- Scalability and Performance:
  - Design the application to handle a growing number of users and data volume without compromising performance.
  - Optimize system performance to ensure fast response times and minimal downtime.

- Error Handling and Logging:
  - Implement error handling mechanisms to detect and handle system errors gracefully.
  - Maintain detailed logs of system activities for troubleshooting and audit purposes.

- Training and Support:
  - Provide comprehensive training materials and support resources for both employees and Admin users.
  - Offer technical support to address any issues or questions users may encounter during system usage.





C. Fingerprint-Based ATM card

- Biometric Authentication:
  - Implement fingerprint recognition technology for user authentication.
  - Ensure accuracy and reliability of fingerprint matching algorithms.

- User Registration and Enrollment:
  - Allow users to enroll their fingerprints during account registration.
  - Store enrolled fingerprint data securely in the system.

- Login and Authentication:
  - Provide a login interface where users can authenticate themselves using their registered fingerprint.
  - Require users to enter a unique PIN after successful fingerprint authentication for added security.

- Banking Transactions:
  - Enable users to perform various banking transactions after successful authentication, including:
    - Cash withdrawals
    - Money transfers between accounts
    - Viewing account balance
    - Viewing transaction history (last 5 transactions)

- Transaction Security:
  - Implement encryption mechanisms to secure communication between the client application and the server.
  - Ensure all transactions are performed securely and are protected against unauthorized access.

- Error Handling and Logging:
  - Implement robust error handling mechanisms to handle exceptions gracefully.
  - Maintain detailed logs of user transactions for auditing and troubleshooting purposes.

- User Interface:
  - Develop a user-friendly interface for the desktop application, including:
    - Clear instructions for fingerprint enrollment and login.
    - Intuitive navigation for conducting banking transactions.
    - Visual feedback for successful and unsuccessful operations.

- System Security:
  - Implement access controls to restrict unauthorized access to sensitive functionalities.
  - Apply security best practices to protect against common threats such as spoofing or tampering.

- Performance:
  - Ensure the system responds promptly to user actions, providing a seamless and efficient user experience.
  - Optimize system performance to handle multiple concurrent users without degradation.

- Data Backup and Recovery:
  - Implement regular backups of user data and transaction logs to prevent data loss.
  - Provide mechanisms for data recovery in case of system failures or data corruption.





D. Android Local Ticketing System

- User Authentication:
  - Implement secure login mechanisms for both Admin and User accounts.
  - Ensure user authentication and authorization to access respective functionalities.

- Ticket Booking Functionality:
  - Develop a user-friendly ticket booking form for users to select their preferred destination, travel class (first class or second class), and journey type (single or return).
  - Validate user inputs to ensure correctness and prevent errors.
  - Allow users to view available trains and their schedules for the selected destination.

- Ticket Reservation:
  - Reserve tickets for users based on their booking preferences.
  - Ensure that seat availability is updated in real-time to prevent overbooking.

- Online Booking Receipts:
  - Generate online booking receipts for users upon successful ticket reservation.
  - Provide options for users to view and print their booking receipts as hard copies.

- Admin Functionality:
  - Implement functionalities for Admin account, including:
  - Recharging user account balance.
  - Viewing processed tickets of a specific user.
  - Managing train schedules and availability.

- User Account Management:
  - Allow users to view their account balance and transaction history.
  - Provide options for users to update their profile information and password.

- Data Security and Privacy:
  - Implement encryption mechanisms to protect sensitive user data during transmission and storage.
  - Ensure compliance with data privacy regulations to safeguard user confidentiality.

- Error Handling and Logging:
  - Implement error handling mechanisms to detect and handle system errors gracefully.
  - Maintain detailed logs of user transactions and system activities for auditing and troubleshooting purposes.
  
- User Interface:
  - Design a user-friendly interface for the Android application, including:
  - Intuitive navigation for booking tickets and managing user accounts.
  - Clear instructions and feedback for users throughout the booking process.

- Offline Functionality:
  - Provide offline access to previously booked tickets and booking receipts.
  - Allow users to view their booking history and receipts even when not connected to the internet.

- System Performance:
  - Optimize system performance to ensure fast response times and minimal downtime.
  - Conduct performance testing to validate the application's scalability and reliability.

- Localization and Accessibility:
  - Support multiple languages and ensure the application is accessible to users with disabilities.

- Documentation and Support:
  - Provide comprehensive documentation for users on how to use the application.
  - Offer technical support to assist   - users with any issues they encounter while using the system.
































































