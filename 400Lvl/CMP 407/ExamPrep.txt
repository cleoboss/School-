CMP 407 EXAM PREP
Best Practice: Study using a big screen device. Be it a laptop or a tablet. It won't be best to use phones (even though y'all ain't with your phones ðŸ˜‰)



----------------------------------------------------------------

















COMPILER CONSTRUCTION 1

1a. What is a Compiler?
ans: A compiler is a program that can read a program in one language(the 
     source language) and translate it into an equivalent program in 
     another language (the target language)

b. An important role of the compiler is to report _________________?
ans: any errors in the source program that it detects during the 
     translation process

c. Draw a diagram of the compiler?
ans: Slide(page 1)

d. List the 6 phases of a compiler?
ans: 1. Lexical Analysis 
     2. Syntax Analysis 
     3. Semantic Analysis 
     4. Intermediate Code Generation 
     5. Code Optimization 
     6. Target Code Generation

e. Draw a diagram of the Phases of Compiler?
ans: Slide(page 2)


Lexical Analysis 
f. ___________ is the first phase of a compiler?
ans: Lexical Analysis (or scanning)

g. What does the Lexical Analyzer do?
ans: it reads the stream of characters making up the source program and 
     groups the characters into meaningful sequences called lexemes

h. For each lexeme, the lexical analyzer produces an output token of the form __________________?
ans: <token-name, attribute-value>

h1. What does the lexical analyzer pass on to the next compiler phase?
ans: It is the token that the lexical analyzer then pass on to the 
     subsequent compiler phase

h2. In the token, the token-name is _____________________?
ans: an abstract symbol (that is used during syntax analysis)

h3. The second component attribute-value points to _____________________?
ans: an entry in the symbol table (for this token)

i. Information from the symbol-table entry is needed for _____________ and ____________ ?
ans: semantic analysis and code generation

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

MAIN EXAMPLE:

For example, suppose a source program contains the assignment statement 

position = initial + rate * 60

The characters in this assignment could be grouped into the following 
lexemes and mapped into the following tokens passed on to the 
syntax analyzer: 

1. `position` is a lexeme that would be mapped into a token <id, 1>, 
    where id is an abstract symbol standing for identifier and 1 points to 
    the symbol table entry for position. The symbol-table entry for an 
    identifier holds information about the identifier, such as its name and type. 

2. The assignment symbol = is a lexeme that is mapped into the token < = >. 
   Since this token needs no attribute-value, we have omitted the second 
   component.

3. `initial` is a lexeme that is mapped into the token < id, 2> , where 2 
   points to the symbol table entry for initial. 

4. + is a lexeme that is mapped into the token <+>. 

5. `rate` is a lexeme that is mapped into the token < id, 3 >, where 3 
   points to the symbol-table entry for rate. 

6. * is a lexeme that is mapped into the token <*> . 

7. 60 is a lexeme that is mapped into the token <60>  

Blanks separating the lexemes would be discarded by the lexical analyzer
 
The representation of the assignment statement position = initial + rate * 
60 after lexical analysis as a sequence of tokens is: 

   < id, l > < = > <id, 2> <+> <id, 3> < * > <60>      Token Stream


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


SPIN-OFF
. Given the below assignment statement. Group the characters into 
  here lexemes and map them to there following tokens

height = 10 + constant - initial / 55

ans: 1. height is a lexeme that would map to <id, 1> where 1 points to the symbol table entry for height  

     2. The assignment symbol = is a lexeme that would map to <=>  

     3. 10 is a lexeme that would map to <10>  

     4. + is a lexeme that would map to <+>  

     5. constant is a lexeme that would map to <id, 2> where 2 points to the symbol table entry for constant  

     6. - is a lexeme that would map to <->  

     7. initial is a lexeme that would map to <id, 3> where 3 points to the symbol table entry for initial  

     8. / is a lexeme that would map to </>  

     9. 55 is a lexeme that would map to <55>  

     The representation of the assignment statement would then be  

     <id, 1> <=> <10> <+> <id, 2> <-> <id, 3> </> <55>


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Syntax Analysis
k. The second phase of the compiler is __________________
ans: syntax analysis (or parsing)

l. What does the Syntax Analyzer do?
ans: The Syntax Analyzer (or parser) uses the token-name (first components 
     of the tokens produced by the lexical analyzer) to create a tree-like 
     intermediate representation that depicts the grammatical structure of 
     the token stream

     simply:
       They use the token-name to create a tree-like intermediate representation that depicts the grammatical structure of the token stream

m. A typical representation is a syntax tree in which each interior node represents an operation and the children of the node represent the arguments of the operation. Show an example of this using the below lexemes from earlier

< id, 1 > < = > <id, 2> <+> <id, 3> < * > <60> Token Stream

ans: 
         =
       /   \
      /     \
<id, 1>      +
           /   \
          /     \
    <id, 2>      *
               /   \
              /     \       (Syntax Tree)
          <id, 3>    60

m1. The tree above has an interior node labeled with ( id, 3 ) as its left 
    child and the integer 60 as its right child. The node (id, 3) 
    represents the identifier rate. The node labeled * says explicitly that 
    we must first multiply the value of `rate` by 60. The node labeled + 
    indicates that we must add the result of this multiplication to the 
    value of initial. The root of the tree, labeled =, indicates that we 
    must store the result of this addition into the location for the 
    identifier position. true or false?
ans: true


Semantic Analysis
n. What does the Semantic Analyzer do?
ans: The Semantic Analyzer uses the syntax tree and the information in the symbol table to check the source program for semantic consistency with the language definition

o. The Semantic Analyzer also gathers _____________?
ans: Type information

o. The Semantic Analyzer stores the type information it gathers in 
   __________ and __________?
ans: - the syntax tree and 
     - the symbol table

p. Why does the Semantic Analyzer gather type information?
ans: For it to be used during intermediate-code generation

q. An important part of semantic analysis is type checking, where ______________________________
ans: the compiler checks that each operator has matching operands

Tip: 5 + 2
     (+) is the operator
     (5, 2) are the operands

q1. Give an example of such a scenario. 
ans: For example, many programming language definitions require an array 
     index to be an integer; the compiler must report an error if a floating-point number is used to index an array

r. Some sort of type conversion is also done by the semantic analyzer
ans: Big facts

r1. If an operator is applied to a floating point number and an integer, 
    the compiler may __________________________
ans: convert the integer into a floating point number

r2. In our example `position = initial + rate * 60`, suppose that position, 
    initial, and rate have been declared to be floating-point numbers,  
    and that the lexeme 60 by itself is an integer. When the semantic  
    analyzer discovers that the operator * is applied to a floating-point 
    number rate and an integer 60. it will ____________________
ans: convert the integer into a floating-point number (60 => 60.0)

r3. if rate where a floating-point number, how would our syntax tree look?
ans:   
         =
       /   \
      /     \
<id, 1>      +
           /   \
          /     \
    <id, 2>      *
               /   \
              /     \       (Syntax Tree)
        <id, 3>  inttofloat
                     |         
                     60

r4. What would be the result of the above Syntax tree
ans: 
         =
       /   \
      /     \
<id, 1>      +
           /   \
          /     \
    <id, 2>      *
               /   \
              /     \       (Syntax Tree)
        <id, 3>    60.0


Intermediate Code Generation

s. In the process of translating a source program into target code, a 
   compiler may construct one or more intermediate representations, which 
   can have a variety of forms. Syntax trees are a form of intermediate 
   representation; they are commonly used during syntax and semantic 
   analysis.
ans: true

t. After syntax and semantic analysis of the source program, many compilers 
   generate an explicit low-level (or machine-like) intermediate 
   representation, which we can think of as a program for an abstract 
   machine. true or false
ans: true

u. Intermediate code representations should have 2 important properties. 
   Name them?
ans: 1. It should be simple and easy to produce   
     2. It should be easy to translate into the target machine

Using the `position = initial + rate * 60` example (if rate was a 
floating-point value)

v. What would the intermediate representation of our assignment statement be?
ans: t1 = inttofloat(60)
     t2 = id3 * t1
     t3 = id2 + t2
     id1 = t3

     (Note: it uses the syntax tree order to ge the answer)


Code Optimization
w. What happens in the Code Optimization phase?
ans: The code optimizer attempts to improve the intermediate code 
     (to get a better target code). 
     
w1. What are the objectives for performing optimization? 
ans: - faster execution 
     - shorter code
     - a target code that consumes less power

w2. What would the optimized code look like?
ans:  t1 = id3 * inttofloat(60)
      id1 = id2 + t1


Target Code Generation
x. What happens in the Target Code Generator?
ans: The code generator takes as input an intermediate representation of 
     the source program and maps it into the target language. 
     
     Note:
     If the target language is machine code, registers (or memory locations) are selected for each of the variables used by the program
     
     Then, the intermediate instructions are translated into sequences of machine instructions that perform the same task

x1. A crucial aspect of code generation is the judicious assignment of 
    registers to hold variables. 
ans: Facts

x2. If the target language is assembly language. What would the code generator generate for our code?
ans: LDF  R2, id3            (R2 = rate)
     MULF R2, R2, #60.0      (R2 = R2 * 60.0)
     LDF  R1, id2            (R1 = initial)
     ADDF R1, R1, R2         (R1 = R1 + R2) 
     STF  id1, R1            (id1 = R1)

     The above code correctly implements the assignment statement  
     position = initial + rate * 60

x3. Explain the assembly language code above?
ans: - LDF R2, id3: Load the floating-point value from `id3` into register 
       R2

     - MULF R2, R2, #60.0: Multiply the value in register R2 by the 
       constant floating-point value 60.0 and store the result back in 
       register R2

     - LDF R1, id2: Load the floating-point value from `id2` into register 
       R1

     - ADDF R1, R1, R2: Add the contents of registers R1 and R2 and store 
       the result back in register R1

     - STF id1, R1: Store the contents of register R1 into the memory 
       location labeled as `id1`


Symbol Table Management


y. An essential function of a compiler is to record the _____________ used 
   in the ___________ and collect _______________________________?
ans: variable names, 
     source program, 
     information about various attributes of each variable name

y1. Variable name attributes may provide information about?
ans: - the storage allocated for a name, 
     - its type, 
     - its scope (where in the program its value may be used), 
     
     Extra:
      and in the case of procedure names, such things as 
      - the number of arguments
      - the types of arguments, 
      - the method of passing each argument (e.g by value or by reference),
      - the type returned

y2. What is the Symbol Table?
ans: The symbol table is a data structure containing a record for each 
     variable name, with fields for the attributes of the name

y3. How should the Symbol Table data structure be designed?
ans: The data structure should be designed to allow the compiler to find 
     the record for each name quickly and to store or retrieve data from 
     that record quickly



Error Detection and Reporting

z. How many of the Compiler Phases can encounter errors?
ans: all of them

Note: 
This phases are either lexical, syntax, semantics, intermediate code generator, code optimization, target code generator

z1. How do the phases deal with these errors?
ans: After a phase detects an error, it somehow deals with that error, so 
     that compilation can proceed, allowing further errors in the source 
     program to be detected

z2. A compiler that stops when it finds the first error is not a helpful 
    one
ans: That is soo true

z3. Draw a diagram showing the "Translation of an assignment statement"?
ans: Slide (page 7)

z4. The process of compilation is split up into 2 phases. Name them?
ans: - Analysis Phase
     - Synthesis Phase

z5. List the actions performed by the analysis phase?
ans: - Lexical Analysis
     - Syntax Analysis
     - Semantics Analysis
     - Intermediate Code Generation

z6. What happens in the Analysis phase?
ans: - The analysis part breaks up the source program into constituent 
       pieces and imposes a grammatical structure on them. It then uses 
       this structure to create an intermediate representation of the 
       source program. If the analysis part detects that the source program 
       is either syntactically ill formed or semantically unsound, then it 
       must provide informative messages, so the user can take corrective 
       action

     - The analysis part also collects information about the source program 
       and stores it in a data structure called a symbol table, which is 
       passed along with the intermediate representation to the synthesis part

z7. List the actions performed by the Synthesis phase?
ans: - Code Optimization
     - Code Generation

z8. What happens in the Synthesis Phase?
ans: - The synthesis part constructs the desired target program from the 
       intermediate representation and the information in the symbol table 
     
z9. What are both phases usually called?
ans: Analysis phase is often called the front end of the compiler 
     Synthesis phase is the back end



----------------------------------------------------------------

















SYNTAX TREE


2a. What are Syntax Trees?
ans: Syntax trees are abstract or compact representation of parse trees

b Syntax trees are also called?
ans: Abstract Syntax Tree (AST)

c. What is an AST?
ans: An AST is a hierarchical tree structure that represents the syntactic 
     structure of a program or expression, emphasizing the relationships 
     between different elements without necessarily adhering to a strict 
     binary structure

d. Draw a diagram that shows a Parse Tree and a Syntax Tree?
ans: SyntaxTree.pdf (page 1)

e. In a tabular form. List 4 differences between the Parse Tree and the 
   Syntax Tree?
ans: 
-----------
IN A TABULAR FORMAT (Parse Tree vs Syntax Tree)

P1. Parse tree is a graphical representation of the replacement process in 
    a derivation
S1. Syntax tree is the compact form of a parse tree

P2. Each interior node represents a grammar rule.  
    Each leaf node represents a terminal.
S2. Each interior node represents an operator. 
    Each leaf node represents an operand.

P3. Parse trees provide every characteristic information from the real 
    syntax
S3. Syntax trees do not provide every characteristic information from the 
    real syntax

P4. Parse trees are comparatively less dense than syntax trees
S4. Syntax trees are comparatively more dense than parse trees

------------

f. Why are Syntax Trees called Abstract Syntax Trees?
ans: - They are abstract representation of the parse trees 
     - They do not provide every characteristic information from the real 
       syntax.
     - For example- no rule nodes, no parenthesis etc.  
       

f. Construct a syntax tree for the following arithmetic expression 
   ( a + b ) * ( c â€“ d ) + ( ( e / f ) * ( a + b )) 
ans: 

STEP 1: Generate the postfix

( a + b ) * ( c â€“ d ) + ( ( e / f ) * ( a + b ) ) 
ab+ * ( c â€“ d ) + ( ( e / f ) * ( a + b ) ) ab+ 
* cd- + ( ( e / f ) * ( a + b ) ) ab+ * cd- + 
( ef/ * ( a + b ) ) ab+ * cd- + ( ef/ * ab+ ) 
ab+ * cd- + ef/ab+* ab+cd-* + ef/ab+* 
ab+cd-*ef/ab+*+

STEP 2: Push string expression into a stack

SyntaxTree.pdf (page 3)



































