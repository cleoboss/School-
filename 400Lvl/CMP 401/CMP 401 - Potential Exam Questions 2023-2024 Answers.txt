i. Computers need their own language for various reasons. Discuss any 3 of 
   these reasons
ans: - Direct communication with hardware: Machine code is the only 
       language that the computer hardware understands directly. It 
       consists of binary code, which corresponds to the electrical signals 
       that control the hardware components.

     - Efficiency: Machine code is the most efficient way for a computer to 
       execute instructions. It provides direct control over the hardware, 
       allowing for optimal performance.

     - Control over memory and resources: Machine code allows programs to 
       directly access and manipulate memory and other system resources, 
       providing fine-grained control over system operations.

     - Compatibility: Machine code ensures compatibility with different 
       hardware architectures. By using a standard set of instructions, 
       software written in machine code can run on any hardware that 
       supports those instructions.

     - Security: Machine code allows for low-level control over system 
       security. It enables features such as memory protection and access 
       control, which are essential for ensuring the integrity and security 
       of computer systems.

     - Real-time processing: Machine code is often used in real-time 
       systems where timing is critical. Its direct control over hardware 
       allows for precise timing and rapid response to external events.

     - Embedded systems: Machine code is commonly used in embedded systems, 
       where the program is tightly integrated with the hardware. Its 
       efficiency and direct control over hardware make it ideal for such 
       applications

ii. Discuss object-oriented language stating the major principle behind it
ans: Object-oriented language looks at the world as a group of objects with 
     internal data, some of which are accessible to the outside world.
     It thinks of a collection of objects and what services they can offer
     It thrives on reusability and inheritance
     The main principle here is encapsulation which refers to the coupling of the fields and methods of an object inside that object

iii. Discuss the reasons behind the idea of studying programming languages.
ans: It helps improve a programmers ability to develop effective 
     Algorithms, It improves our ability to use existing languages, learn 
     new languages, design a language, pick the right programming language 
     for solving particular problems and also it adds to our vocabulary 
     containing useful programming constructs  

iv. Who would you meet when it is time to define and standardize your 
    programming language? Why does your language need standardizing and 
    when is the appropriate time to go for it?
ans: Who would I meet?
     I would either meet one of the 3
     - ISO (International Standards Organization)
     - IEEE (Institute of Electrical and Electronics Engineering)
     - ANSI (American National Standards Institute)

     Why does a language need standardizing
      Interoperability: Standardization ensures that programs written in the language can run on different platforms and systems without modification. This promotes interoperability and allows developers to write code that works across a variety of environments.

      Consistency: Standardization helps maintain consistency in the language's syntax, semantics, and features. This makes it easier for developers to learn and use the language, and reduces the likelihood of errors and bugs.

      Compatibility: Standardization ensures that different implementations of the language (compilers, interpreters, etc.) are compatible with each other. This allows developers to choose from multiple implementations while still ensuring that their code will work correctly.

      Long-term maintenance: A standardized language is easier to maintain and evolve over time. It provides a stable foundation for future enhancements and ensures that existing code will continue to work as expected.

     When is the appropriate time to go for it?
      The appropriate time to standardize a programming language is typically when it has reached a certain level of maturity and adoption. This ensures that the standard reflects the language's established features and practices, and that it is widely accepted by the developer community. Additionally, standardization may be necessary when there are multiple competing implementations of a language, or when there is a need to promote interoperability and compatibility among different systems.

v. Discuss any 2 of the commonly used criteria for evaluating a programming 
   language
ans: Readability
     Writability
     Reliability
     Cost

vi. Describe anyone of the implemenation methods. Show diagrams
ans: Compilation
     - This translates the entire source program into its equivalent 
       machine language program and executes it. It is very fast.

       Diagram
       (Slide I page 40)


vii. Using an example, differentiate between the syntax and the semantics 
     of a programming language
ans: - Syntax is the form of the expressions, statements and program units
     - Semantics is the meaning of the expressions, statements, and program 
       units

viii. Given the statement: int i = 2 * count + 17 * (a+b);, separate the 
      statement into its tokens and lexemes.
ans:  Lexeme      Token
      int         data_type
      i           identifier
      =           equal_sign
      2           int_literal
      *           mult_op
      count       identifier
      +           plus_op
      17          int_literal
      *           mult_op
      (           open_bracket
      a           identifier
      +           plus_op
      b           identifier
      )           close_bracket
      ;           semicolon

ix. Given the grammar for a small language as:
<program> -> begin <stmt_list> end
              <stmt_list> -> <stmt> 
              | <stmt>; <stmt_list> 
              <stmt> -> <var>=<expression>
              <var>->A|B|C
              <expression> -> <var>+<var>
              |<var>-<var>
              |<var>

    Describe every components of this grammar
ans: - A program consists of the special word begin, followed by a list of
       statements separated by semicolons, followed by the special word end.
       
     - An expression is either a single variable or two variables separated
       by either a + or - operator.
       
     - The only variable names in this language are A, B, and C.


x. Generate the grammar for A=B*(A+C) and provide its parse tree.
ans: <assign> => <id> = <expr>
          => A = <expr>
          => A = <id> * <expr>
          => A = B * <expr>
          => A = B * ( <expr>)
          => A = B * ( <id> + <expr>)
          => A = B * ( A + <expr>)
          => A = B * ( A + <id>)
          => A = B * ( A + C )

xi. Show that the statement: A=B+C*A is an ambiguous grammar.
ans: (SLIDE II page 28)


