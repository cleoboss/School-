CMP 401 EXAM PREP THEORY
Best Practice: Study using a big screen device. Be it a laptop or a tablet. It won't be best to use phones (even though y'all ain't with your phones 😉)



----------------------------------------------------------------



SLIDE I



1a. List 5 areas of computer applications?
ans: - Scientific Applications
     - Business Applications
     - Artificial Intelligence
     - Web Software
     - Medicine

 b. What is Natural language?
 ans: The Natural Language is a structured system of communication used by 
      humans through speech, signs, gestures and writing

    i. What makes up the structure of a language?
    ans: Grammar and vocabulary

    ii. list 5 examples of natural language?
    ans: - English
         - Spanish
         - French
         - Portuguese
         - Chinese


2a. What is a Programming language?
ans: Programming language is the vocabulary and a set of grammatical rules 
     used to instruct computers

    i. List 7 Programming languages?
    ans: - Java
         - C/C++
         - COBOL
         - Prolog
         - Python
         - Javascript
         - Golang
         - Rust

 b. List all 3 categories of programming languages?
 ans: - procedural programming languages
      - functional programming languages
      - object oriented programming languages

    i. Discuss how procedural programming languages work and list 3 procedural languages?
    ans: - These are used to execute a sequence of statements
         - These languages use multiple variables and heavy loops to 
           execute their problems.
         - In procedural languages, functions may control variables other 
           than return values. For example, printing.
         - Examples of procedural languages include:
           - Basic, C/C++, Java, FORTRAN and Pascal

    ii. Discuss how functional programming languages work and list 3 functional languages?
    ans: - These languages use stored data and frequently avoid loops in 
           favour of recursive functions to execute their problems.
         - These languages focus primarily on the return values of 
           functions.
         - Functional languages are easier and allow programmers to easily 
           focus on abstract issues.
         - Examples include:
           - Python, Lisp and Erlang

    iii. Discuss how Object-oriented programming languages work and list 3 Object-oriented languages?
    ans: - These programming languages view the world as a group of objects 
           that have internal data and parts of the data can be accessed 
           externally.
         - The aim is to think about a collection of objects and services 
           that can be offered in specific problems.
         - The major principle here is encapsulation which puts everything 
           an object would need into the object.
         - These languages thrive on reusability and inheritance.
         - Examples include:
           - Java, Python, C++, Lisp, and Perl

 c. List 5 reasons why one should study programming languages?
 ans: - To improve our ability to develop effective Algorithms
      - To improve our use of your existing Programming Languages
      - To increase our vocabulary of useful programming constructs
      - To allow a better choice of programming language
      - To make it easier to learn a new language
      - To make it easier to design a new language


3a. List the 3 national standards bodies that define Language standards?
ans: IS0 - International Standards Organization
     ANSI - American National Standards Institute
     IEEE - Institute of Electrical and Electronics Engineering 

    i. There are 4 steps this organizations take to defining Language 
       standards. Name them?
    ans: - Working group of volunteers set up to define standard
         - Agree on features for new standard
         - Vote on standard
         - If approved by working group, submitted to parent organization 
           for approval

    ii. How often are standards reviewed?
    ans: Once every 5 years

 b. why are standards important?
 ans: - Standards ensure language conformity with rules and laws.
      - Standards define behavior/constructs of language - one that
        meets the rules of language standards.

4a. How are Languages defined?
ans: They are defined on the basis of characters and symbols which are 
     strung up to form words or signs

5a. List 4 of the commonly used criteria for Evaluating a programming 
    language?
ans: - Readability
     - Writability
     - Reliability
     - Cost 

 b. Discuss the below
    - Readability
    - Writability
    - Reliability
      i. List 4 characteristic used in measuring Reliability of programming languages
    - Cost
      i. List and briefly discuss the 4 characteristics that lead to the total cost of programming languages?
 ans: - Readability
        The ease with which a program can be read and understood is one of the most important criteria for judging programming languages.
        
        There was a time when programming was largely thought of in terms 
        of writing codes.

        At this stage, the primary positive characteristic of programming 
        languages was efficiency.

        Language construct were designed more from the point of view of the 
        machines instead of the users.

        Things changed when SDLC integrated maintenance in the cycle.

        Readability became an important criteria for measuring the quality 
        of programming languages because maintenance depends largely on 
        readability.

      - Writability  
        Writability is a measure of how easily a language can be used to
        create programs for a chosen problem domain.
        
        Like readability, writability is also considered in the context of 
        the target problem domain of the language.
        
        Writability eases the ability to chose languages in solving 
        problems in particular domains.
        
        For example, the writabilities of Visual BASIC (VB) and C are
        dramatically different for creating a program that has a graphical 
        user interface (GUI) for which VB is particularly designed for.

      - Reliability
        A program is said to be reliable if it performs to its specification
        under all conditions.

        Reliability is measured based on characteristics such as:
        - Type checking
        - Exception handling
        - Aliasing
        - Readability and writability.

      - Cost
        The total cost of a programming language is a function of many of 
        its characteristics:
         1. Cost of training programmers to use the language
            - This is a function of the simplicity and orthogonality and 
              experience of the programmer.
            - Although more powerful not necessarily more difficult to 
              learn, they often are.
         2. Cost of writing programs in the language
            - This is a function of the writability of language which 
              depends in part on its closeness in purpose to the particular 
              application.
            - The original efforts to design and implement high level 
              languages were driven by the desire to lower the costs of 
              creating software.
         3. Cost of compiling
            - For example, the major impediment to early use of Ada was the
              prohibitively high cost of running the first generation of 
              Ada compilers.
         4. Language design
            - The cost of executing programs written in a language is 
              greatly influenced by the design.
            - Some language that requires many run-time type checks will 
              prohibit fast code execution, regardless of the quality of 
              the compiler.
            - A simple trade off can be made between compilation cost and
              execution speed of the compiled code using optimization.
            - Optimization is a collection of techniques that compilers use 
              decrease the size and/or increase the execution speed of the 
              code they produce.




6a. What are the 2 factors that influence Language Design?
ans: - Computer Architecture and
     - Programming design methodologies

 b. Discuss Computer Architecture?
 ans: The basic architecture of computers has had a profound effect
      on language design. Most of the popular languages of the past 60 
      years have been designed around the prevalent computer architecture, 
      called the von Neumann architecture.
      
      John von Neumann is one of the originators of this architecture 
      therefore it is named after him.

    i. What is the von Neumann architecture
    ans: It is a prevalent computer architecture that has shaped language 
         design for the past 60 years

    ii. Who was the main originator of this architecture?
    ans: John von Neumann

    iii. Discuss the von Neumann Architecture?
    ans: - In a von Neumann computer, both the data and programs are
           stored in the same memory.
         - The central processing unit (CPU) which executes the instruction
           is separate from the memory.
         - Therefore, instructions and data must be transmitted, or piped
           from memory to the CPU.
         - Results of operations in the CPU are then moved back to the
           memory.
         - Nearly all the digital computers built since the 1940s are based
           on this architecture.  


          a. Draw a diagram of the von Neumann Architecture?4
          ans: Slide 30

          b. The execution of machine code on this architecture occurs in a 
             process called?
          ans: The fetch-execute cycle

          c. Where is the address of the next instruction to be executed in 
             this architecture located at?
          ans: The program counter (or a special register)

          d. List the steps in the fetch-execute cycle?
          ans: - initialize the program counter
               - repeat forever
               - fetch the instruction pointed to by the program counter
               - increment the program counter to point at the next 
                 instruction
               - decode the instruction
               - execute the instruction
               - endrepeat

          f. What are the 2 primary components of a digital computer (that 
             uses the von Neumann Architecture)?
          ans: - The processor
               - Internal Memory

 d. Discuss Language Implementation method and what it requires and its 
    primitives?
 ans: - Language implementation methods provide the facilities through
        which high level programming languages get to speak the
        language of the machine.
      - Implementation methods require the Operating System which supplies 
        higher-level primitives than those of the machine language.
      - These primitives provide
         - System resource management
         - Input and output operations
         - File management system
         - text and/or program editors
         - And a host of other functionalities.
      - Because language implementation systems need many of the operating 
        system facilities, they interface with the OS rather than directly 
        with the processor.  
      - The OS and language implementations are layered over the
        machine language interface of the computer.  
      - These layers can be thought of a virtual computers, providing
        interface to the user at higher levels   

7a. List the 3 fundamental methods used for implementing a programming 
    language?
ans: - Compilation
     - Pure Interpretation
     - Hybrid Implementation 

 b. Discuss the Compilation method?
 ans: - This method uses compilers to translate programs into machine 
        languages which are directly executed on the computer.
      - Languages that use this method have the advantage of being very 
        fast, once the translation process is complete

    i. List 3 languages that makes use of the compilation method
    ans: C, C++, and COBOL

    ii. Draw a diagram showing the phases involved in the compilation method?
    ans: Slide 40

    iii. The language which the compiler translates is the ____________?
    ans: Source code

    iv. Explain the below compilation phases?
        a. Lexical Analyzer
        b. Syntax Analyzer
        c. Intermediate code generator
        d. Semantic Analyzer
        e. Optimization
        f. Code Generator
   ans: a. Lexical Analyzer: groups the units of the source program into 
           lexical units or lexemes. lexical units of a program are 
           identifiers (or variables), special words, operators, and 
           punctuation symbols.

           It also ignores comments in source program

        b. Syntax Analyzer: takes the lexical units from the lexical 
           analyzer and uses them to construct hierarchical structures 
           called parse trees

           Parse trees represent the syntactic structure of the program

        c. Intermediate code generator: translates the source program into 
           an intermediate representation that is not the machine code

           The intermediate code generated could be in assembly language or 
           a higher level one.

        d. Semantic Analyzer: checks for errors, such as type errors, 
           errors that are difficult, if not impossible, to detect during syntax analysis

        e. Optimization: improves the program by making them smaller or 
           faster or both.

           This is done on intermediate code because optimization is 
           difficult to do on machine code

        f. Code Generator: translates the optimized intermediate code into 
           its equivalent machine code (or machine language) program
     
     v. Explain the Symbol Table?
     ans: - The symbol table serves as a database for the compilation 
            process
          - The primary contents of the symbol table are the type and 
            attribute information of each variable in the program.
          - This information is placed in the symbol table by the lexical 
            and syntax analyzers and is used by the semantic analyzer and 
            the code generator.

  c. Discuss the Pure Interpretation method?
  ans: - In pure interpretation method, programs are interpreted by another 
         program called an interpreter, with no translation whatever.
       - The interpreter program acts as a software simulation of a machine 
         whose fetch-execute cycle deals with high-level language program 
         statements rather than machine instructions.
       - This software simulation obviously provides a virtual machine for 
         the language.
       - For example, if an array index is found to be out of range, the 
         error message can easily indicate the source line of the error and 
         the name of the array.
       - Statement decoding, rather than the connection between the 
         processor and memory, is the bottleneck of a pure interpreter.
       - The symbol table must be present during interpretation.
       - The primary source of slowness is the decoding of the high-level 
         language statements, which are far more complex than machine 
         language instructions


     i. List 2 advantages of the Pure level interpretation method
     ans: - It allows easy implementation of many source-level debugging 
            operations, because all run-time error messages can refer to source-level units
          - Source program are stored in a form designed for easy access 
            and modification

     ii. List 3 disadvantages
     ans: - Regardless of how many times a statement is executed, it must 
            be decoded every time.
          - It often requires more space. 
          - Execution is 10 to 100 times slower than in compiled systems


     iii. Draw a diagram of a Pure Interpretation program
     ans: (SLIDE I page 51)

  d. Discuss Hybrid Implementation?
  ans: - Some language implementation systems use both compilers and pure 
         interpreters.
       - Here, high-level language programs are translated to an 
         intermediate language designed to allow easy interpretation.
       - This method is faster because the source code is decoded once

       - Also, the .NET languages are all implemented with a JIT system.
       - Sometimes an implementer may provide both compiled and interpreted
         implementations for a language.
       - In these cases, the interpreter is used to develop and debug 
         programs. Then,after a (relatively) bug-free state is reached, the 
         programs are compiled to increase their execution speed.



     i. Why is Hybrid Implementation method faster than pure interpretation
     ans: This method is faster than pure interpretation because the source 
          language statements are decoded only once.

     ii. Draw a diagram showing the phases in the Hybrid Implementation 
         method?
     ans: (SLIDE I page 51)

     iii. Explain Java Hybrid Implementation
     ans: - The initial implementations of Java were all hybrid 
            implementation.
          - Its intermediate form, called byte code, provides portability 
            to any machine that has a byte code interpreter and an 
            associated run-time system.
          - Together, these are called the Java Virtual Machine.
          
          - There are now systems that translate Java byte code into 
            machine code for faster execution.
          - Such systems are called the “Just-in-Time (JIT)”systems.
          - A Just-in-Time (JIT) implementation system initially translates 
            programs to an intermediate language.
          - Then, during execution, it compiles intermediate language  
            methods into machine code when they are called.
          - The machine code version is kept for subsequent calls.
          - JIT systems now are widely used for Java programs.

     iv. Systems that translate javas byte code into machine code faster 
         than Java Virtual Machine are known as ______________
     ans: JIT


Syntax and Semantics
8a. What is syntax and what is semantics?
ans: - The syntax of a programming language is the form of its expressions, 
       statements, and program units.
     - Semantics is the meaning of those expressions, statements, and 
       program units.  

 b. For example, the syntax of a Java while statement is
    while (boolean_expr) statement
    Explain the semantics behind the statement
 ans: The semantics of this statement form is that:
      i. when the current value of the Boolean expression is true, the 
         embedded statement is executed.
      ii. Then control implicitly returns to the Boolean expression to 
          repeat the process.
      iii. If the Boolean expression is false, control transfers to the 
          statement following the while construct


----------------------------------------------------------------


























